#!/usr/bin/env bash
set -e

############################################################################
#
# filter-vulture-results.sh
#
# Vulture is useful for finding potentiall dead or abandoned code, however
# it can often result in false positives. These can happen when code is
# not referenced via basic import. For example, python code referenced
# within HTML templates (jinja, mako), or strings that reference code at
# runtime is not considered by Vulture.

# This script offers a quick way to filter the results generated by Vulture
# by only displaying the tokens in question that are not present elsewhere
# in the specified code paths. This is far from ideal, but can help you get
# started with code cleanup.
#
# NOTE: this does not take into account code that is only referenced via
# tests; those will still appear to be live.
#
############################################################################

REPORT_DIR='reports/vulture'
REPORT_FILE="${REPORT_DIR}/vulture-report.txt"
OUTPUT_FILE="${REPORT_DIR}/filtered-vulture-report.txt"
echo '' > $OUTPUT_FILE
SOURCES='cms common lms openedx'

echo "Filtering ${REPORT_FILE} for unique tokens in the codebase"
while read line; do
    TOKEN=$(echo $line |cut -d"'" -f2)
    TOKEN_DEFINITION_SOURCE=$(echo $line |cut -d":" -f1)
    TOTAL_COUNT=$(grep -RIs ${TOKEN} ${SOURCES} |wc -l)

    # Find tokens that are only present in one location in the codebase
    if [ $TOTAL_COUNT -eq 1 ]; then
        echo "${TOKEN_DEFINITION_SOURCE}:${TOKEN}" >> $OUTPUT_FILE
    fi
done < $REPORT_FILE

echo "Filtered results can be found in ${OUTPUT_FILE}"
